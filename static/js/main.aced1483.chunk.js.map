{"version":3,"sources":["img/avatar.png","componentes/ButtonBackHome.js","paginas/Detail.js","componentes/titulo.js","componentes/SearchForm.js","componentes/Movie.js","componentes/MoviesList.js","paginas/Home.js","paginas/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ButtonBackHome","to","className","Detail","movieId","useParams","useState","movie","setMovie","useEffect","console","log","fetchMovie","id","fetch","then","res","json","Title","Poster","Actors","Plot","Awards","Country","Genre","Runtime","imdbRating","src","alt","children","SearchForm","state","inputMovie","handleChange","e","setState","target","value","handleSubmit","preventDefault","results","Search","props","onResults","onSubmit","this","avatar","type","placeholder","onChange","Component","Movie","poster","title","year","MoviesList","movies","map","key","imdbID","Year","Home","usedSerach","setUsedSerach","setResults","length","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aced1483.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.2a468ea8.png\";","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const ButtonBackHome = () => (\r\n    <Link to='/' className=\"button is-info\">\r\n        Volver a Home\r\n    </Link>\r\n)","import React, { useState, useEffect } from 'react';\r\nimport { ButtonBackHome } from \"../componentes/ButtonBackHome\";\r\nimport { useParams, } from 'react-router-dom';\r\n\r\n\r\nconst API_KEY = '7e92a6f6'\r\n\r\nexport default function Detail() {\r\n    const { movieId } = useParams();\r\n    //creo el objeto movie (vacío) como un state\r\n    const [movie, setMovie] = useState({})\r\n    // state = { movie: {} }\r\n\r\n    useEffect(() => {\r\n        console.log(movieId)\r\n        fetchMovie({ id: movieId })\r\n    }, [movieId]); //el corchete significa que se debe ejecutar una vez\r\n\r\n    const fetchMovie = ({ id }) => {\r\n        fetch(`http://www.omdbapi.com/?apikey=${API_KEY}&i=${id}`) //con axios me ahorro los .then (ahorra codigo)\r\n            .then(res =>\r\n                res.json())\r\n            .then(\r\n                movie => {\r\n                    setMovie(movie)\r\n                    console.log(movie)\r\n                }\r\n            )\r\n    }\r\n\r\n    const { Title, Poster, Actors, Plot, Awards, Country, Genre, Runtime, imdbRating } = movie\r\n    return (\r\n        <div>\r\n            <div className=\"columns is-mobile\">\r\n                <div className=\"column\">\r\n                    <div className=\"card\" >\r\n                        <div className=\"card-image\">\r\n                            <img src={Poster} alt={Title} />\r\n                        </div>\r\n                        <div className=\"card-content\">\r\n                            <div className=\"media\">\r\n                                <div className=\"content\">\r\n                                    <h4>Gender: {Genre}</h4>\r\n                                    <h5>Country: {Country}</h5>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"column\">\r\n                    <div className=\"card\">\r\n                        <div className=\"card-content\">\r\n                            <div className=\"media\">\r\n                                <div className=\"content\">\r\n                                    <h1 className=\"title-align-center\">{Title}</h1><br />\r\n                                    <h4>{Plot}</h4><br />\r\n                                    <p>Actors: {Actors}</p><br />\r\n                                    <p>Awards: {Awards}</p><br />\r\n                                    <time>{Runtime}</time><br />\r\n                                    <p>{imdbRating}</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <ButtonBackHome />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// Detail.propTypes = {\r\n//     match: PropTypes.object\r\n// }\r\n\r\n\r\n//Con React Hooks ya no se usa la pal reservada 'this' y las props se declaran fuera de la funcion\r\n//principal\r\n\r\n\r\n// export class Detail extends Component {\r\n//     static propTypes = {\r\n//         match: PropTypes.shape({\r\n//             params: PropTypes.object,\r\n//             isExact: PropTypes.bool,\r\n//             path: PropTypes.string,\r\n//             url: PropTypes.string\r\n//         }),\r\n//     }\r\n//     //creo el objeto movie (vacío) como un state\r\n//     state = { movie: {} }\r\n\r\n//     fetchMovie({ id }) {\r\n//         fetch(`http://www.omdbapi.com/?apikey=${API_KEY}&i=${id}`)\r\n//             .then(res =>\r\n//                 res.json())\r\n//             .then(\r\n//                 movie => {\r\n//                     this.setState({ movie })\r\n//                 }\r\n//             )\r\n//     }\r\n\r\n//     componentDidMount() {\r\n//         console.log(this.props.match)\r\n//         const { movieId } = this.props.match.params\r\n//         this.fetchMovie({ id: movieId })\r\n//     }\r\n\r\n//     render() {\r\n//         const { Title, Poster, Actors, Metascore, Plot } = this.state.movie\r\n//         return (\r\n//             <div>\r\n//                 <ButtonBackHome />\r\n//                 <h1>{Title}</h1>\r\n//                 <img src={Poster} />\r\n//                 <h3>{Actors}</h3>\r\n//                 <span>{Metascore}</span>\r\n//                 <p>{Plot}</p>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }","import React from 'react';\r\n\r\nexport const Title = ({children}) => (\r\n<h1 className=\"title\">{children}</h1>\r\n)","import React, { Component } from 'react';\r\nimport avatar from '../img/avatar.png'\r\n\r\nconst API_KEY = '7e92a6f6'\r\n\r\nexport class SearchForm extends Component {\r\n    state = {\r\n        inputMovie: ''\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({ inputMovie: e.target.value })\r\n        console.log(this.state.inputMovie)\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        const { inputMovie } = this.state\r\n        fetch(`http://www.omdbapi.com/?apikey=${API_KEY}&s=${inputMovie}`) //con axios me ahorro los .then (ahorra codigo)\r\n            .then(res =>\r\n                res.json())\r\n            .then(\r\n                results => {\r\n                    // extrae los parametros Search y TotalResults \r\n                    const { Search = []} = results\r\n                    //comprueba que si el resultado es 'undefined' el array quede vacío\r\n                    // le manda a App.js como props el metodo que actualizara el state results\r\n                    this.props.onResults(Search)\r\n                }\r\n            )\r\n    }\r\n    render() {\r\n        return (\r\n\r\n            <form onSubmit={this.handleSubmit}>\r\n                <img src={avatar} />\r\n                <div className=\"field has-addons\">\r\n                    <div className=\"control\">\r\n                        <input className=\"input\" type=\"text\" placeholder=\"Find a repository\"\r\n                            onChange={this.handleChange} />\r\n                    </div>\r\n                    <div className=\"control\">\r\n                        <button className=\"button is-info\"\r\n                        >\r\n                            Search\r\n                    </button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from \"react-router-dom\";\r\n\r\n/* No hace falta convertirlo a Hooks porque ni usa ni ESTADO ni EFECTOS */\r\nexport class Movie extends Component {\r\n    static propTypes = {\r\n        id: PropTypes.string,\r\n        title: PropTypes.string,\r\n        year: PropTypes.string,\r\n        poster: PropTypes.string\r\n    }\r\n\r\n    render() {\r\n        const { id, poster, title, year } = this.props\r\n\r\n        return (\r\n                <Link to={`/detail/${id}`} className=\"card card-border-radius card-movie-background\">\r\n                    <div className=\"card-image\">\r\n                        <figure className=\"image is-4by3\">\r\n                            <img src={poster} alt={title} className=\"img-movie-radius\"/>\r\n                        </figure>\r\n                    </div>\r\n                    <div className=\"card-content\">\r\n                        <div className=\"media\">\r\n                            <div className=\"media-content\">\r\n                                <p className=\"movie-title\">{title}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"content\">\r\n                            <time className=\"movie-title\">{year}</time>\r\n                        </div>\r\n                    </div>\r\n            </Link>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\"\r\nimport PropTypes from 'prop-types'\r\nimport { Movie } from \"./Movie\"\r\n\r\n/* No hace falta convertirlo a Hooks porque ni usa ni ESTADO ni EFECTOS */\r\nexport class MoviesList extends Component {\r\n    static propTypes = {\r\n        movies: PropTypes.array\r\n    }\r\n\r\n    render() {\r\n        //accedemos a movies de las props que nos llegan, mediante las llaves\r\n        //esto en nuevo en javascript\r\n        const { movies } = this.props\r\n        return (\r\n\r\n            <div className=\"movie-list\">\r\n                {movies.map(movie => {\r\n                    return (\r\n                        <div className=\"movie-list-item\" key={movie.imdbID}>\r\n                            <Movie\r\n                                id={movie.imdbID}\r\n                                title={movie.Title}\r\n                                year={movie.Year}\r\n                                poster={movie.Poster} />\r\n                        </div>\r\n                    )\r\n                })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { useState} from 'react';\r\nimport { Title } from '../componentes/titulo'\r\nimport { SearchForm } from '../componentes/SearchForm'\r\nimport { MoviesList } from '../componentes/MoviesList'\r\n\r\nexport default function Home() {\r\n    //creo el state\r\n    const [usedSerach, setUsedSerach] = useState(false)\r\n    const [results, setResults] = useState([])\r\n\r\n    // state = { usedSerach: false, results: [] }\r\n\r\n    const handleResults = (results) => {\r\n        setResults(results)\r\n        setUsedSerach(true)\r\n    }\r\n\r\n    const renderResults = () => {\r\n        return results.length === 0 ? <p>Sin resultados.</p>\r\n            : <MoviesList movies={results} />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Title>Buscar película</Title>\r\n            <div className=\"SearchForm\">\r\n                <SearchForm onResults={handleResults} />\r\n                \r\n            </div>\r\n            {usedSerach ?\r\n                renderResults() :\r\n                <p>Use el formulario para buscar una movie.</p>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { ButtonBackHome } from \"../componentes/ButtonBackHome\";\r\n\r\nexport const NotFound = () => (\r\n    <div>\r\n        <h1 style={{color: '#000' , fontSize: 30}}>\r\n            404!\r\n        </h1>\r\n        <h3>No existe la página.</h3>\r\n        <ButtonBackHome />\r\n    </div>\r\n)","import React, { Component } from 'react';\nimport { Switch, Route } from \"react-router-dom\";\nimport './App.css';\nimport 'bulma/css/bulma.css'\nimport Detail from './paginas/Detail'\nimport Home from './paginas/Home'\nimport { NotFound } from './paginas/NotFound'\n\n\nclass App extends Component {\n  render() {\n    //manejo de rutas de forma 'imperativa'\n    // const url = new URL(document.location)\n    // const Page = url.searchParams.has('id')?\n    //   <Detail id={url.searchParams.get('id')}/>\n    //   :<Home />\n\n    //Con Switch y Route se manejan las rutas de forma 'declarativa'\n    //<Route component={NotFound}/>\n    return (\n      <div className=\"App\">\n        <Route exact path='/' component={Home} />\n        <Route path='/detail/:movieId' component={Detail} />\n      </div>\n    )\n  }\n\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//maneja el enrutado como un SPA single page aplication\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  //le decimos a React como mnejar el enrutado\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}